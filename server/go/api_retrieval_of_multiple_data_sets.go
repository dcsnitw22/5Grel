/*
 * Nudm_SDM
 *
 * Nudm Subscriber Data Management Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 2.3.0-alpha.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RetrievalOfMultipleDataSetsAPIController binds http requests to an api service and writes the service results to the http response
type RetrievalOfMultipleDataSetsAPIController struct {
	service      RetrievalOfMultipleDataSetsAPIServicer
	errorHandler ErrorHandler
}

// RetrievalOfMultipleDataSetsAPIOption for how the controller is set up.
type RetrievalOfMultipleDataSetsAPIOption func(*RetrievalOfMultipleDataSetsAPIController)

// WithRetrievalOfMultipleDataSetsAPIErrorHandler inject ErrorHandler into controller
func WithRetrievalOfMultipleDataSetsAPIErrorHandler(h ErrorHandler) RetrievalOfMultipleDataSetsAPIOption {
	return func(c *RetrievalOfMultipleDataSetsAPIController) {
		c.errorHandler = h
	}
}

// NewRetrievalOfMultipleDataSetsAPIController creates a default api controller
func NewRetrievalOfMultipleDataSetsAPIController(s RetrievalOfMultipleDataSetsAPIServicer, opts ...RetrievalOfMultipleDataSetsAPIOption) Router {
	controller := &RetrievalOfMultipleDataSetsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RetrievalOfMultipleDataSetsAPIController
func (c *RetrievalOfMultipleDataSetsAPIController) Routes() Routes {
	return Routes{
		"GetDataSets": Route{
			strings.ToUpper("Get"),
			"/nudm-sdm/v2/{supi}",
			c.GetDataSets,
		},
	}
}

// GetDataSets - retrieve multiple data sets
func (c *RetrievalOfMultipleDataSetsAPIController) GetDataSets(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	supiParam := params["supi"]
	if supiParam == "" {
		c.errorHandler(w, r, &RequiredError{"supi"}, nil)
		return
	}
	var datasetNamesParam []DataSetName
	if query.Has("dataset-names") {
		// datasetNamesParam = strings.Split(query.Get("dataset-names"), ",")
		fmt.Println(datasetNamesParam)
	}
	var plmnIdParam PlmnIdNid
	if query.Has("plmn-id") {
		// plmnIdParam = query.Get("plmn-id")
		fmt.Println(plmnIdParam)
	}
	var adjacentPlmnsParam []PlmnId
	if query.Has("adjacent-plmns") {
		// adjacentPlmnsParam = strings.Split(query.Get("adjacent-plmns"), ",")
		fmt.Println(adjacentPlmnsParam)
	}
	var singleNssaiParam Snssai
	if query.Has("single-nssai") {
		// singleNssaiParam = query.Get("single-nssai")
		fmt.Println(singleNssaiParam)
	}
	var dnnParam string
	if query.Has("dnn") {
		dnnParam = query.Get("dnn")
	}
	var ucPurposeParam UcPurpose
	if query.Has("uc-purpose") {
		// ucPurposeParam = query.Get("uc-purpose")
		fmt.Println(ucPurposeParam)
	}
	disasterRoamingIndParam, err := parseBoolParameter(
		query.Get("disaster-roaming-ind"),
		WithDefaultOrParse[bool](false, parseBool),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var supportedFeaturesParam string
	if query.Has("supported-features") {
		supportedFeaturesParam = query.Get("supported-features")
	}
	ifNoneMatchParam := r.Header.Get("If-None-Match")
	ifModifiedSinceParam := r.Header.Get("If-Modified-Since")
	result, err := c.service.GetDataSets(r.Context(), supiParam, datasetNamesParam, plmnIdParam, adjacentPlmnsParam, singleNssaiParam, dnnParam, ucPurposeParam, disasterRoamingIndParam, supportedFeaturesParam, ifNoneMatchParam, ifModifiedSinceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
