/*
 * Nudm_SDM
 *
 * Nudm Subscriber Data Management Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 2.3.0-alpha.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RetrievalOfTheIndividualSharedDataAPIController binds http requests to an api service and writes the service results to the http response
type RetrievalOfTheIndividualSharedDataAPIController struct {
	service      RetrievalOfTheIndividualSharedDataAPIServicer
	errorHandler ErrorHandler
}

// RetrievalOfTheIndividualSharedDataAPIOption for how the controller is set up.
type RetrievalOfTheIndividualSharedDataAPIOption func(*RetrievalOfTheIndividualSharedDataAPIController)

// WithRetrievalOfTheIndividualSharedDataAPIErrorHandler inject ErrorHandler into controller
func WithRetrievalOfTheIndividualSharedDataAPIErrorHandler(h ErrorHandler) RetrievalOfTheIndividualSharedDataAPIOption {
	return func(c *RetrievalOfTheIndividualSharedDataAPIController) {
		c.errorHandler = h
	}
}

// NewRetrievalOfTheIndividualSharedDataAPIController creates a default api controller
func NewRetrievalOfTheIndividualSharedDataAPIController(s RetrievalOfTheIndividualSharedDataAPIServicer, opts ...RetrievalOfTheIndividualSharedDataAPIOption) Router {
	controller := &RetrievalOfTheIndividualSharedDataAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RetrievalOfTheIndividualSharedDataAPIController
func (c *RetrievalOfTheIndividualSharedDataAPIController) Routes() Routes {
	return Routes{
		"GetIndividualSharedData": Route{
			strings.ToUpper("Get"),
			"/nudm-sdm/v2/shared-data/{sharedDataId}",
			c.GetIndividualSharedData,
		},
	}
}

// GetIndividualSharedData - retrieve the individual shared data
func (c *RetrievalOfTheIndividualSharedDataAPIController) GetIndividualSharedData(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	var sharedDataIdParam []string
	fmt.Println(params)
	fmt.Println(sharedDataIdParam)
	// sharedDataIdParam := params["sharedDataId"]
	// if sharedDataIdParam == []string {
	// 	c.errorHandler(w, r, &RequiredError{"sharedDataId"}, nil),
	// 	return
	// }
	var supportedFeaturesParam string
	if query.Has("supported-features") {
		supportedFeaturesParam = query.Get("supported-features")
	}
	ifNoneMatchParam := r.Header.Get("If-None-Match")
	ifModifiedSinceParam := r.Header.Get("If-Modified-Since")
	result, err := c.service.GetIndividualSharedData(r.Context(), sharedDataIdParam, supportedFeaturesParam, ifNoneMatchParam, ifModifiedSinceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
